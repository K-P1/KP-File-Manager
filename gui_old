import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import os
import logging
from pathlib import Path

from sorter import FileSorter
from renamer import Renamer

class FileManagerGUI:
    """
    GUI for file operations: sorting, renaming, and keyword-based renaming.
    """
    def __init__(self, master):
        self.master = master
        self.master.title("File Manager (Tkinter)")

        self.sorter = FileSorter()
        self.renamer = Renamer()

        # Setup logging
        self.log_file = "operation_logs.txt"

        # Shared input vars
        self.operation_var = tk.StringVar(value="sort")
        self.source_var = tk.StringVar()
        self.dest_var = tk.StringVar()

        # Mass Rename vars
        self.mass_ext_var = tk.StringVar(value="mp4")
        self.mass_prefix_var = tk.StringVar(value="Renamed_")
        self.mass_start_var = tk.IntVar(value=1)
        self.mass_padding_var = tk.IntVar(value=2)
        self.scramble_var = tk.BooleanVar(value=False)
        self.scramble_multiplier_var = tk.IntVar(value=1)

        # Keyword Rename vars
        self.key_ext_var = tk.StringVar(value="mp4")
        self.keyword_var = tk.StringVar()
        self.new_keyword_var = tk.StringVar()

        self._create_widgets()
        self._layout_widgets()
        self._update_operation_fields()

    def _create_widgets(self):
        # Operation buttons
        self.rbtn_sort = ttk.Radiobutton(self.master, text="Sort Files", variable=self.operation_var, value="sort", command=self._update_operation_fields)
        self.rbtn_mass_rename = ttk.Radiobutton(self.master, text="Mass Rename", variable=self.operation_var, value="mass_rename", command=self._update_operation_fields)
        self.rbtn_music_rename = ttk.Radiobutton(self.master, text="Music Rename", variable=self.operation_var, value="music_rename", command=self._update_operation_fields)
        self.rbtn_keyword_rename = ttk.Radiobutton(self.master, text="Keyword Rename", variable=self.operation_var, value="keyword_rename", command=self._update_operation_fields)

        # Input fields and labels
        self.lbl_source = ttk.Label(self.master, text="Source Folder:")
        self.entry_source = ttk.Entry(self.master, textvariable=self.source_var, width=50)
        self.btn_browse_source = ttk.Button(self.master, text="Browse", command=self._browse_source)

        self.lbl_dest = ttk.Label(self.master, text="Destination Folder:")
        self.entry_dest = ttk.Entry(self.master, textvariable=self.dest_var, width=50)
        self.btn_browse_dest = ttk.Button(self.master, text="Browse", command=self._browse_dest)

        self.lbl_mass_ext = ttk.Label(self.master, text="File Extension:")
        self.entry_mass_ext = ttk.Entry(self.master, textvariable=self.mass_ext_var, width=10)
        self.lbl_mass_prefix = ttk.Label(self.master, text="Prefix:")
        self.entry_mass_prefix = ttk.Entry(self.master, textvariable=self.mass_prefix_var, width=10)

        self.lbl_mass_start = ttk.Label(self.master, text="Start Index:")
        self.entry_mass_start = ttk.Entry(self.master, textvariable=self.mass_start_var, width=5)
        self.lbl_mass_pad = ttk.Label(self.master, text="Zero Padding:")
        self.entry_mass_pad = ttk.Entry(self.master, textvariable=self.mass_padding_var, width=5)

        self.chk_scramble = ttk.Checkbutton(self.master, text="Scramble", variable=self.scramble_var, command=self._toggle_scramble_fields)
        self.lbl_scramble_mult = ttk.Label(self.master, text="Scramble Multiplier (1..10):")
        self.entry_scramble_mult = ttk.Entry(self.master, textvariable=self.scramble_multiplier_var, width=5)

        self.lbl_key_ext = ttk.Label(self.master, text="Keyword Rename Extension:")
        self.entry_key_ext = ttk.Entry(self.master, textvariable=self.key_ext_var, width=10)
        self.lbl_keyword = ttk.Label(self.master, text="Keyword:")
        self.entry_keyword = ttk.Entry(self.master, textvariable=self.keyword_var, width=20)
        self.lbl_new_keyword = ttk.Label(self.master, text="New Keyword:")
        self.entry_new_keyword = ttk.Entry(self.master, textvariable=self.new_keyword_var, width=20)

        self.btn_preview = ttk.Button(self.master, text="Preview", command=self.on_preview)
        self.btn_run = ttk.Button(self.master, text="Run", command=self.on_run)
        self.btn_undo = ttk.Button(self.master, text="Undo", command=self.on_undo)
        self.btn_quit = ttk.Button(self.master, text="Quit", command=self.master.quit)

    def _layout_widgets(self):
        widgets = [
            [self.rbtn_sort, self.rbtn_mass_rename, self.rbtn_music_rename, self.rbtn_keyword_rename],
            [self.lbl_source, self.entry_source, None, self.btn_browse_source],
            [self.lbl_dest, self.entry_dest, None, self.btn_browse_dest],
            [self.lbl_mass_ext, self.entry_mass_ext, self.lbl_mass_prefix, self.entry_mass_prefix],
            [self.lbl_mass_start, self.entry_mass_start, self.lbl_mass_pad, self.entry_mass_pad],
            [self.chk_scramble, self.lbl_scramble_mult, self.entry_scramble_mult, None],
            [self.lbl_key_ext, self.entry_key_ext, self.lbl_keyword, self.entry_keyword],
            [self.lbl_new_keyword, self.entry_new_keyword, None, None],
            [self.btn_preview, self.btn_run, self.btn_undo, self.btn_quit]
        ]
        for r, row in enumerate(widgets):
            for c, widget in enumerate(row):
                if widget:
                    widget.grid(row=r, column=c, padx=5, pady=5, sticky=(tk.W if isinstance(widget, ttk.Radiobutton) else tk.EW))

    def _enable_widget(self, widget):
        try: widget.config(state="normal")
        except tk.TclError: pass

    def _disable_widget(self, widget):
        try: widget.config(state="disabled")
        except tk.TclError: pass

    def _toggle_scramble_fields(self):
        for w in [self.lbl_scramble_mult, self.entry_scramble_mult]:
            self._enable_widget(w) if self.scramble_var.get() else self._disable_widget(w)

    def _browse_source(self):
        if (d := filedialog.askdirectory()): self.source_var.set(d)

    def _browse_dest(self):
        if (d := filedialog.askdirectory()): self.dest_var.set(d)

    def _setup_file_logger(self):
        if os.path.exists(self.log_file): os.remove(self.log_file)
        handler = logging.FileHandler(self.log_file, mode='w', encoding='utf-8')
        handler.setLevel(logging.INFO)
        handler.setFormatter(logging.Formatter("%(asctime)s [%(levelname)s] %(message)s"))
        logging.getLogger().addHandler(handler)
        return handler

    def _cleanup_file_logger(self, handler):
        logging.getLogger().removeHandler(handler)
        handler.close()

    def _update_operation_fields(self):
        op = self.operation_var.get()
        op_fields = {
            "sort": [self.lbl_dest, self.entry_dest, self.btn_browse_dest],
            "mass_rename": [self.lbl_mass_ext, self.entry_mass_ext, self.lbl_mass_prefix, self.entry_mass_prefix, self.lbl_mass_start, self.entry_mass_start, self.lbl_mass_pad, self.entry_mass_pad, self.chk_scramble, self.lbl_scramble_mult, self.entry_scramble_mult],
            "keyword_rename": [self.lbl_key_ext, self.entry_key_ext, self.lbl_keyword, self.entry_keyword, self.lbl_new_keyword, self.entry_new_keyword]
        }
        all_fields = [
            self.lbl_dest, self.entry_dest, self.btn_browse_dest,
            self.lbl_mass_ext, self.entry_mass_ext, self.lbl_mass_prefix, self.entry_mass_prefix,
            self.lbl_mass_start, self.entry_mass_start, self.lbl_mass_pad, self.entry_mass_pad,
            self.chk_scramble, self.lbl_scramble_mult, self.entry_scramble_mult,
            self.lbl_key_ext, self.entry_key_ext, self.lbl_keyword, self.entry_keyword,
            self.lbl_new_keyword, self.entry_new_keyword
        ]
        for w in all_fields: self._disable_widget(w)
        for w in op_fields.get(op, []): self._enable_widget(w)
        self._toggle_scramble_fields()

    def _remove_empty_dirs(self, parent_dir: Path):
        if not parent_dir.exists(): return
        for root, dirs, files in os.walk(parent_dir, topdown=False):
            if not files and not dirs:
                try:
                    os.rmdir(root)
                    logging.info(f"Removed empty folder: {root}")
                except Exception as e:
                    logging.warning(f"Could not remove {root}: {e}")

    def on_preview(self):
        self._handle_operation(dry_run=True)

    def on_run(self):
        self._handle_operation(dry_run=False)

    def _handle_operation(self, dry_run):
        source = self.source_var.get()
        if not source:
            messagebox.showwarning("Warning", "Please select a Source folder.")
            return

        op = self.operation_var.get()
        fh = self._setup_file_logger()
        logging.info(f"=== {'PREVIEW' if dry_run else 'RUN'}: {op.upper()} ===")

        try:
            if op == "sort":
                dest = self.dest_var.get()
                if not dest:
                    messagebox.showwarning("Warning", "Please select a Destination folder for sorting.")
                    return
                self.sorter.sort_directory(source, dest, dry_run=dry_run)

            elif op == "mass_rename":
                self.renamer.mass_rename(
                    folder=source,
                    file_extension=self.mass_ext_var.get(),
                    prefix=self.mass_prefix_var.get(),
                    start_index=int(self.mass_start_var.get()),
                    zero_padding=int(self.mass_padding_var.get()),
                    dry_run=dry_run,
                    scramble=self.scramble_var.get(),
                    scramble_multiplier=min(max(int(self.scramble_multiplier_var.get()), 1), 10)
                )

            elif op == "music_rename":
                self.renamer.rename_music(folder=source, extensions=["mp3"], dry_run=dry_run)

            elif op == "keyword_rename":
                if not self.keyword_var.get():
                    messagebox.showwarning("Warning", "Please enter the keyword to search for.")
                    return
                self.renamer.rename_by_keyword(
                    folder=source,
                    file_extension=self.key_ext_var.get(),
                    keyword=self.keyword_var.get(),
                    new_keyword=self.new_keyword_var.get(),
                    dry_run=dry_run
                )
        finally:
            self._cleanup_file_logger(fh)
            messagebox.showinfo("Complete", f"Logs {'previewed' if dry_run else 'written'} to '{self.log_file}'.")

    def on_undo(self):
        op = self.operation_var.get()
        fh = self._setup_file_logger()
        logging.info(f"=== UNDO: {op.upper()} ===")
        try:
            if op == "sort":
                self.sorter.undo()
                if self.dest_var.get():
                    self._remove_empty_dirs(Path(self.dest_var.get()))
            else:
                self.renamer.undo()
        except Exception as e:
            logging.error(f"Undo failed: {e}")
            messagebox.showerror("Undo Failed", "Some operations could not be undone. Check logs.")
        else:
            messagebox.showinfo("Undo Complete", "All operations have been undone successfully.")
        finally:
            self._cleanup_file_logger(fh)

def main():
    logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
    root = tk.Tk()
    app = FileManagerGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()
